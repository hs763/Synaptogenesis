#----------------------------needed packges-------------------------------------
library(tidyverse)
library(viridis)
library(biomaRt)
library(irlba)
library(Rtsne)
library(Matrix)
library(reticulate)
library(umap)
library(scDblFinder)
library(rlist)
library(celda)
library(ggplot2)
library(scran)
library(scater)
library(scuttle)

library(viridisLite)
library(leiden)

#----------------------------------data----------------------------------------
#combined raw matrix 
path2data   <- '/data2/ivanir/Feline2023/ParseBS/newvolume/analysis/sCell/combined/all-well/DGE_unfiltered/'
sample_info <- read.table('/mnt/ivanir/Feline2023/ParseBS/newvolume/analysis/sample_info.tab', sep = "\t", header = TRUE)

counts    <- t(readMM(paste0(path2data, "DGE.mtx")))
genes     <- read.csv(paste0(path2data, "all_genes.csv"))
              #head(genes)
              #          gene_id gene_name genome
              #1 ENSG00000000003    TSPAN6   hg38   
metadata  <- read.csv(paste0(path2data, "cell_metadata.csv"))
rownames(counts) <- genes$gene_id
colnames(counts) <- metadata$bc_wells



#species-separated data
path2data <- '/data2/hanna/synaptogenesis/newvolume/analysis/Nov2023/'

counts_h <- t(readMM(paste0(path2data, "counts_H.mtx")))
colnames_h <- read.csv(path2data, "colnames_H.csv")
rownames_h <- read.csv(path2data, "rownames_H.csv")

counts_m <- t(readMM(paste0(path2data, "counts_M.mtx")))
colnames_m <- read.csv(path2data, "colnames_M.csv")
rownames_m <- read.csv(path2data, "wornames_M.csv")



#sce
sce_h <- readRDS('/data2/hanna/synaptogenesis/newvolume/analysis/Nov2023/QC_H/sce.rds')
sce_h <- readRDS('/data2/hanna/synaptogenesis/newvolume/analysis/Nov2023/QC_M/sce.rds')

#---------------------------QC---------------------------------

#import data
path2data   <- '/mnt/ivanir/Feline2023/ParseBS/newvolume/analysis/sCell/combined/all-well/DGE_unfiltered'
sample_info <- read.table('/mnt/ivanir/Feline2023/ParseBS/newvolume/analysis/sample_info.tab',
  sep = "\t", header = TRUE)

counts    <- t(readMM(paste0(path2data, "/DGE.mtx")))
genes     <- read.csv(paste0(path2data, "/all_genes.csv"))
metadata  <- read.csv(paste0(path2data, "/cell_metadata.csv"))

rownames(counts) <- genes$gene_id 
colnames(counts) <- metadata$bc_wells

#what are the parameters 
lib.sizes <- colSums(counts)
ngenes    <- colSums(counts > 0)

print(paste('Number of genes: ', nrow(counts)))
print(paste('Number of cells: ', ncol(counts)))


#applying intial filteres (?)
#UMI (lib.sizes) filter based on article: https://hbctraining.github.io/scRNA-seq/lessons/04_SC_quality_control.html
pdf("/mnt/hanna/synaptogenesis/newvolume/analysis/Jan2024", "UMI_hist.pdf", sep="/")
hist(lib.sizes)
#determinign the gene number filter 
pdf("/mnt/hanna/synaptogenesis/newvolume/analysis/Jan2024", "ngenes_hist.pdf", sep="/")
hist(ngenes)

#counts   <- counts[,ngenes > 400 & lib.sizes > 500]
#metadata <- metadata[ngenes > 400 & lib.sizes > 500,]
#lib.sizes <- colSums(counts)
#ngenes    <- colSums(counts > 0)
#print(paste('Number of genes: ', nrow(counts)))
#print(paste('Number of cells: ', ncol(counts)))

#ngens/UMIs filter
pdf("/mnt/hanna/synaptogenesis/newvolume/analysis/Jan2024", "ngenes/lib.sizes_hist.pdf", sep="/")
hist(ngenes/lib.sizes)

counts   <- counts[,ngenes/lib.sizes < 0.9]
metadata <- metadata[ngenes/lib.sizes < 0.9,]
lib.sizes <- colSums(counts)
ngenes    <- colSums(counts > 0)
#the plot looks srange as there are so many celsl with very little ngenes. 

#cell complexity filter
ensembl_m <- useEnsembl(biomart = "ensembl",  dataset = "mmusculus_gene_ensembl",mirror="useast")
gene_map_m  <- getBM(attributes=c("ensembl_gene_id", "mgi_symbol", "chromosome_name"),
  filters = "mgi_symbol", values = genes$gene_name, mart = ensembl)

ensembl_h <- useEnsembl(biomart = "ensembl",  dataset = "hsapiens_gene_ensembl",mirror="useast")
gene_map_h  <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol", "chromosome_name"),
  filters = "hgnc_symbol", values = genes$gene_name, mart = ensembl)

ensembl <- ensembl_m + ensembl_h
gene_map <- gene_map_m + gene_map_h

mt.index    <- gene_map$chromosome_name == "MT"
mt.counts   <- counts[which(genes$gene_name %in% gene_map$hgnc_symbol[mt.index]), ]
mt.fraction <- colSums(mt.counts)/lib.sizes
mt.p   <- pnorm(mt.fraction, mean = median(mt.fraction), sd = mad(mt.fraction), lower.tail = FALSE)

mt.lim <- 0.2

metadata <- data.frame(cbind(metadata,mt.fraction))

#Plot mitochondrial treshold 
pdf("mtreadfraction.pdf")
qplot(lib.sizes, mt.fraction, col = ifelse(mt.fraction>mt.lim, "drop", "keep")) +
  scale_x_log10() +
  labs(x = "UMI count", y = "MT read fraction") +
  theme_minimal() + 
  theme(text = element_text(size=20),legend.position = "none")  +
  scale_color_manual(values = c("drop" = "grey50", "keep" = "black"), name = "")
dev.off()

pdf("cellcomplexity.pdf")
ggplot(aes(x=metadata$tscp_count, y=metadata$gene_count, color=metadata$mt.fraction)) + 
  	geom_point() + 
	scale_colour_gradient(low = "gray90", high = "black") +
  	stat_smooth(method=lm) +
  	scale_x_log10() + 
  	scale_y_log10() + 
  	theme_classic() +
  	geom_vline(xintercept = 500) +
  	geom_hline(yintercept = 250) +
  	facet_wrap(~sample)

#adding the sample names in terms of days into the sample_info 
sample_bc1_well <- rep(NA, nrow(metadata))        
sample_number   <- rep(NA, nrow(metadata))
sample_name_H    <- rep(NA, nrow(metadata))
sample_name_M    <- rep(NA, nrow(metadata))

#editing sample info
sample_info$H_day <- sample_info$H_Timepoint 
sample_info$H_day <- gsub("55\\+","",sample_info$H_day)
sample_info$H_day <- as.integer(sample_info$H_day)
sample_info$H_day <-  sample_info$H_day +55
sample_info$Sample_name_H <- paste(sample_info$H_Batch, sample_info$H_day, sample_info$H_Replicate, sep="_")

sample_info$M_day <- sample_info$M_Timepoint
sample_info$M_day <- gsub("8\\+","",sample_info$M_day)
sample_info$M_day <- as.integer(sample_info$M_day)
sample_info$M_day <-  sample_info$M_day +8
sample_info$Sample_name_M <- paste(sample_info$M_Batch, sample_info$M_day, sample_info$M_Replicate, sep="_")

samples <- unique(sample_info$Sample_well)
for (i in 1:length(samples)){
  sample_bc1_well[metadata$bc1_well %in% unlist(strsplit(samples[i],split=","))] <- sample_info$Sample_well[i]
  sample_number[metadata$bc1_well %in% unlist(strsplit(samples[i],split=","))]   <- sample_info$Sample_Number[i]
  sample_name_H[metadata$bc1_well %in% unlist(strsplit(samples[i],split=","))]     <- sample_info$Sample_name_H[i]
  sample_name_M[metadata$bc1_well %in% unlist(strsplit(samples[i],split=","))]     <- sample_info$Sample_name_M[i]
}

submeta_H <- data.frame(rlist::list.rbind(strsplit(sample_name_H, split="_")))
colnames(submeta_H) <- c("batch_H", "day_H", "replicate_H")
submeta_H$day_H <- gsub("d","",submeta_H$day_H)

submeta_M <- data.frame(rlist::list.rbind(strsplit(sample_name_M, split="_")))
colnames(submeta_M) <- c("batch_M", "day_M", "replicate_M")
submeta_M$day_M <- gsub("d","",submeta_M$day_M)

metadata <- data.frame(cbind(metadata, lib.sizes, sample_number, sample_bc1_well, sample_name_H, sample_name_M, submeta_H, submeta_M))

#---------------------------separating species---------------------------------
#finding mapping rates to human and mouse genomes 
metadata$rate_h <- metadata$hg38_tscp_count/metadata$tscp_count
metadata$rate_m <- metadata$mm10_tscp_count/metadata$tscp_count

#PLOTTING MAPPIGN RATE TO DECIDE ON THE TRESHOLDS 
pdf("human_tscp_mapping_rate.pdf")
ggplot(metadata, aes(x=rate_h)) + geom_histogram(color="blue", fill= "blue", bins=30)
dev.off()

pdf("mouse_tscp_mapping_rate.pdf")
ggplot(metadata, aes(x=rate_m)) + geom_histogram(color="orange", fill= "orange", bins=30)
dev.off()

#rate_h >< rate_m method 
metadata$cell_specie <- rep(NA, nrow(metadata))
for (i in 1:nrow(metadata)){
  if (metadata$rate_h[i] > metadata$rate_m[i]){
    metadata$cell_species[i] <- "h"}
  else {metadata$cell_species[i] <- "m"
  }
}


#cutoff#1 0.75 percent for both
metadata2 <- metadata 
metadata2$cell_species <- rep(NA, nrow(metadata2))
for (i in 1:nrow(metadata2)) {
  if (metadata2$rate_h[i] > 0.75) {
    metadata2$cell_species[i] <- "h"
  } else if (metadata2$rate_m[i] > 0.75) {
    metadata2$cell_species[i] <- "m"
  } else {
    metadata2$cell_species[i] <- "0"
  }
}

subset_h2 <- metadata2[metadata2$cell_species == "h",]
subset_m2 <- metadata2[metadata2$cell_species == "m",]

print(paste('Number of huamn cells for cuttoff 0.75: ', nrow(subset_h2)))
print(paste('Number of mouse cells for cuttoff 0.75: ', nrow(subset_m2)))
print(paste('Cells lost: ', (ncol(counts) - (nrow(subset_h2) + nrow(subset_m2)))))
print(paste('Total number of cells: ', ((nrow(subset_h2) + nrow(subset_m2)))))
[1] "Number of huamn cells for cuttoff 0.75:  53480"
[1] "Number of mouse cells for cuttoff 0.75:  15068"
[1] "Cells lost:  1904"
[1] "Total number of cells:  68548"


#saving the counts matrices for human andn mosue cells
subset_h2$sample_name <- subset_h2$sample_name_H
subset_m2$sample_name <- subset_m2$sample_name_M
write.csv(subset_h2, "metadata_H.csv")
write.csv(subset_m2, "metadata_M.csv")

dim(subset_h2)
#53480    33
dim(subset_m2)
#15068    33

counts_H <- counts[, colnames(counts) %in% subset_h2$bc_wells]
counts_M <- counts[, colnames(counts) %in% subset_m2$bc_wells]

dim(counts_H)
#119684  53480
dim(counts_M)
#119684  15068

#save the counts matricies
#this will nto stor the rownames and colnames 
writeMM(counts_H, "counts_H.mtx")
writeMM(counts_M, "counts_M.mtx")

#save the col and rownames for both
colnames_H <- colnames(counts_H)
rownames_H <- rownames(counts_H)
colnames_M <- colnames(counts_M)
rownames_M <- rownames(counts_M)
write.csv(colnames_H, "colnames_H.csv")
write.csv(rownames_H, "rownames_H.csv")
write.csv(colnames_M, "colnames_M.csv")
write.csv(rownames_M, "rownames_M.csv")



#---------------------------------human_sce-------------------------------------

# Read data into Bioconductor package SingleCellExperiment
tryCatch( 
  expr = {
    sce <- SingleCellExperiment(list(counts=counts[,mt.fraction < mt.lim]),
      colData=DataFrame(metadata[mt.fraction < mt.lim,]))
    rownames(sce) <- genes$gene_id

    rownames(genes) <- rownames(sce)
    rowData(sce) <- DataFrame(genes)

    colnames(sce) <- metadata$bc_wells[mt.fraction  < mt.lim]
    colData(sce)  <- DataFrame(metadata[mt.fraction < mt.lim,])

    lib.sizes <- colSums(counts(sce))
    sce_filt  <- sce[calculateAverage(sce)>0.01,]

    clusts <- as.numeric(quickCluster(sce_filt, method = "igraph", min.size = 100))

    min.clust <- min(table(clusts))/2
    new_sizes <- c(floor(min.clust/3), floor(min.clust/2), floor(min.clust))
    sce_filt  <- computeSumFactors(sce_filt, clusters = clusts, sizes = new_sizes, max.cluster.size = 3000)

    sizeFactors(sce) <- sizeFactors(sce_filt)

    # Create Size Factors plot
    pdf("sizefactors.pdf")
    ggplot(data = data.frame(X = lib.sizes, Y = sizeFactors(sce)), mapping = aes(x = X, y = Y)) +
      geom_point() +
      scale_x_log10(breaks = c(500, 2000, 5000, 10000, 30000), labels = c("5,00", "2,000", "5,000", "10,000", "30,000") ) +
      scale_y_log10(breaks = c(0.2, 1, 5)) +
      theme_minimal() +
      theme(text = element_text(size=20))  +
      labs(x = "Number of UMIs", y = "Size Factor")
    dev.off()
  },
  error = function(e){ 
    message('Caught an error!')
    print(e)
  },
  warning = function(w){
    message('Caught an warning!')
    print(w)
  }
)

library(tidyverse)
library(BiocParallel)

bp <- MulticoreParam(25, RNGseed=1234)
      bpstart(bp)
      sce <- scDblFinder(sce, samples="bc1_well", dbr=.05, dims=30, BPPARAM=bp)
      bpstop(bp)
      table(sce$scDblFinder.class)
#singlet doublet 
#  48382    5054 

sce_filt <- sce[calculateAverage(sce)>0.01,]
      sce_filt <- logNormCounts(sce_filt)

decomp  <- modelGeneVar(sce_filt)
hvgs    <- rownames(decomp)[decomp$FDR < 0.1]
length(hvgs)
#3467
pca     <- prcomp_irlba(t(logcounts(sce_filt[hvgs,])), n = 30)
rownames(pca$x) <- colnames(sce_filt)
tsne <- Rtsne(pca$x, pca = FALSE, check_duplicates = FALSE, num_threads=30)
umap  <- umap(pca$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=30, min_dist=.25)

 df_plot <- data.frame(
      colData(sce),
      doublet  = colData(sce)$scDblFinder.class,
      tSNE1    = tsne$Y[, 1],
      tSNE2    = tsne$Y[, 2], 
      UMAP1 = umap$layout[,1],
      UMAP2 = umap$layout[,2] 
      )

# Plot doublets on tsne plot
      plot.index <- order(df_plot$doublet)
      ggplot(df_plot[plot.index,], aes(x = tSNE1, y = tSNE2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))
    
      ggsave( "tsne_doublets.pdf")

# Plot doublets on UMAP
      ggplot(df_plot[plot.index,], aes(x = UMAP1, y = UMAP2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

        ggsave("umap_doublets.pdf")


# Plot box-whisket plot of number of reads in singlet / doublet cells
      ggplot(df_plot, aes(x=doublet, y=log10(lib.sizes))) + 
        geom_boxplot() +
        labs(x = "", y = "log10(Library size)") 

      ggsave("boxplot_doublets.pdf")

doublet_score <- colData(sce)$scDblFinder.score
doublet_class <- colData(sce)$scDblFinder.class
sce_qc <- sce[,colData(sce)$scDblFinder.class == "singlet"]


 # Plot UMIs by sample after QC filtering
      ggplot(data.frame(colData(sce_qc)), aes (x = factor(sample_name), y = as.numeric(lib.sizes))) +
        geom_boxplot() +
        theme_bw() +  coord_flip() +
        labs(x = "Sample", y = "Number of UMIs") +
        scale_y_log10(breaks = c(100, 1000, 5000, 10000, 50000, 100000),
          labels = c("100","1,000", "5,000", "10,000", "50,000", "100,000"))

      ggsave("UMIsBySample_afterQC.pdf")

# Plot UMI density for each sample after QC filtering
     pdf("UMIsDensityBySample_afterQC.pdf", width=12)

    data.frame(colData(sce_qc)) %>% 
          ggplot(aes(color=sample_name, x=lib.sizes, fill= sample_name)) + 
          geom_density(alpha = 0.2) + 
          scale_x_log10() + 
          theme_classic() +
          ylab("Cell density") +
          geom_vline(xintercept = 400)
      dev.off()

# Barchart of the number of cells for each sample after QC
      ggplot(data.frame(colData(sce_qc)), aes (x = factor(sample_name))) +
        geom_bar() +
        theme_bw() +  coord_flip() +
        labs(x = "Sample", y = "Number of Cells") 

      ggsave("CellsBySample_afterQC.pdf")


colData(sce) <- colData(sce)[,-grep("scDblFinder",colnames(colData(sce)))]
colData(sce)$doublet_score <- doublet_score
colData(sce)$doublet_class <- doublet_class

# Plot the histogram of doublet score
      pdf("histogram_of_doublet_score.pdf")
      hist(doublet_score)
      dev.off()

saveRDS(sce, "sce.rds")

setwd("sctour_dir")

sce <- sce[,colData(sce)$doublet_class == "singlet"]

      writeMM(t(counts(sce)), "raw_counts.mtx")
      
      writeLines(colnames(sce), "cells.txt")

      writeLines(rownames(sce), "genes.txt")

      meta <- cbind(cell=rownames(colData(sce)), colData(sce))
      write.table(data.frame(meta), file="metadata.tab", sep="\t", row.names=FALSE, quote=FALSE)

      sce_filt <- sce[calculateAverage(sce)>0.01,]
      sce_filt <- logNormCounts(sce_filt)

      writeMM(t(logcounts(sce_filt)), "norm_counts.mtx", sep="\t")

      writeLines(colnames(sce_filt), "cells_norm.txt")

      writeLines(rowData(sce_filt)$gene_name, "genes_norm.txt")

#---------------------------------mouse_sce-------------------------------------
# Read data into Bioconductor package SingleCellExperiment
    sce <- SingleCellExperiment(list(counts=counts[,mt.fraction < mt.lim]),
      colData=DataFrame(metadata[mt.fraction < mt.lim,]))
    rownames(sce) <- genes$gene_id

    rownames(genes) <- rownames(sce)
    rowData(sce) <- DataFrame(genes)

    colnames(sce) <- metadata$bc_wells[mt.fraction  < mt.lim]
    colData(sce)  <- DataFrame(metadata[mt.fraction < mt.lim,])

    lib.sizes <- colSums(counts(sce))
    sce_filt  <- sce[calculateAverage(sce)>0.01,]

    clusts <- as.numeric(quickCluster(sce_filt, method = "igraph", min.size = 100))

    min.clust <- min(table(clusts))/2
    new_sizes <- c(floor(min.clust/3), floor(min.clust/2), floor(min.clust))
    sce_filt  <- computeSumFactors(sce_filt, clusters = clusts, sizes = new_sizes, max.cluster.size = 3000)

    sizeFactors(sce) <- sizeFactors(sce_filt)

    # Create Size Factors plot
    pdf("sizefactors.pdf")
    ggplot(data = data.frame(X = lib.sizes, Y = sizeFactors(sce)), mapping = aes(x = X, y = Y)) +
      geom_point() +
      scale_x_log10(breaks = c(500, 2000, 5000, 10000, 30000), labels = c("5,00", "2,000", "5,000", "10,000", "30,000") ) +
      scale_y_log10(breaks = c(0.2, 1, 5)) +
      theme_minimal() +
      theme(text = element_text(size=20))  +
      labs(x = "Number of UMIs", y = "Size Factor")
    dev.off()


library(tidyverse)
library(BiocParallel)

bp <- MulticoreParam(25, RNGseed=1234)
      bpstart(bp)
      sce <- scDblFinder(sce, samples="bc1_well", dbr=.05, dims=30, BPPARAM=bp)
      bpstop(bp)
      table(sce$scDblFinder.class)
#singlet doublet 
#14200     857 

sce_filt <- sce[calculateAverage(sce)>0.01,]
      sce_filt <- logNormCounts(sce_filt)

decomp  <- modelGeneVar(sce_filt)
hvgs    <- rownames(decomp)[decomp$FDR < 0.1]
length(hvgs)
#91
write.csv(hvgs,"hvgs.csv")
pca     <- prcomp_irlba(t(logcounts(sce_filt[hvgs,])), n = 30)
rownames(pca$x) <- colnames(sce_filt)
tsne <- Rtsne(pca$x, pca = FALSE, check_duplicates = FALSE, num_threads=30)
layout  <- umap(pca$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=30, min_dist=.25)

 df_plot <- data.frame(
      colData(sce),
      doublet  = colData(sce)$scDblFinder.class,
      tSNE1    = tsne$Y[, 1],
      tSNE2    = tsne$Y[, 2], 
      UMAP1 = layout$layout[,1],
      UMAP2 = layout$layout[,2] 
      )

# Plot doublets on tsne plot
      plot.index <- order(df_plot$doublet)
      ggplot(df_plot[plot.index,], aes(x = tSNE1, y = tSNE2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))
    
      ggsave( "tsne_doublets.pdf")

# Plot doublets on UMAP
      ggplot(df_plot[plot.index,], aes(x = UMAP1, y = UMAP2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

        ggsave("umap_doublets.pdf")


# Plot box-whisket plot of number of reads in singlet / doublet cells
      ggplot(df_plot, aes(x=doublet, y=log10(lib.sizes))) + 
        geom_boxplot() +
        labs(x = "", y = "log10(Library size)") 

      ggsave("boxplot_doublets.pdf")

doublet_score <- colData(sce)$scDblFinder.score
doublet_class <- colData(sce)$scDblFinder.class
sce_qc <- sce[,colData(sce)$scDblFinder.class == "singlet"]


 # Plot UMIs by sample after QC filtering
      ggplot(data.frame(colData(sce_qc)), aes (x = factor(sample_name), y = as.numeric(lib.sizes))) +
        geom_boxplot() +
        theme_bw() +  coord_flip() +
        labs(x = "Sample", y = "Number of UMIs") +
        scale_y_log10(breaks = c(100, 1000, 5000, 10000, 50000, 100000),
          labels = c("100","1,000", "5,000", "10,000", "50,000", "100,000"))

      ggsave("UMIsBySample_afterQC.pdf")

# Plot UMI density for each sample after QC filtering
     pdf("UMIsDensityBySample_afterQC.pdf", width=12)

    data.frame(colData(sce_qc)) %>% 
          ggplot(aes(color=sample_name, x=lib.sizes, fill= sample_name)) + 
          geom_density(alpha = 0.2) + 
          scale_x_log10() + 
          theme_classic() +
          ylab("Cell density") +
          geom_vline(xintercept = 400)
      dev.off()

# Barchart of the number of cells for each sample after QC
      ggplot(data.frame(colData(sce_qc)), aes (x = factor(sample_name))) +
        geom_bar() +
        theme_bw() +  coord_flip() +
        labs(x = "Sample", y = "Number of Cells") 

      ggsave("CellsBySample_afterQC.pdf")


colData(sce) <- colData(sce)[,-grep("scDblFinder",colnames(colData(sce)))]
colData(sce)$doublet_score <- doublet_score
colData(sce)$doublet_class <- doublet_class

# Plot the histogram of doublet score
      pdf("histogram_of_doublet_score.pdf")
      hist(doublet_score)
      dev.off()

saveRDS(sce, "sce.rds")

setwd("sctour_dir")

sce <- sce[,colData(sce)$doublet_class == "singlet"]

      writeMM(t(counts(sce)), "raw_counts.mtx")
      
      writeLines(colnames(sce), "cells.txt")

      writeLines(rownames(sce), "genes.txt")

      meta <- cbind(cell=rownames(colData(sce)), colData(sce))
      write.table(data.frame(meta), file="metadata.tab", sep="\t", row.names=FALSE, quote=FALSE)

      sce_filt <- sce[calculateAverage(sce)>0.01,]
      sce_filt <- logNormCounts(sce_filt)

      writeMM(t(logcounts(sce_filt)), "norm_counts.mtx", sep="\t")

      writeLines(colnames(sce_filt), "cells_norm.txt")

      writeLines(rowData(sce_filt)$gene_name, "genes_norm.txt")

#------------------------------human_decount-----------------------------------
#------------------------------mouse_decount-----------------------------------
