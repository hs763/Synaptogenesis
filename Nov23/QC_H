cd /data2/hanna/synaptogenesis/newvolume
singularity shell --bind /data2:/mnt qc_cell.sif
cd /mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/QC_H

#go into R 
library(scuttle)
library(scran)
library(irlba)
library(Rtsne)
library(Matrix)
library(ggplot2)
library(biomaRt)
library(viridisLite)
library(viridis)
library(scDblFinder)

#These count matricies have been filtered for ngenes > 400, lib.sizes > 500, and ngenes/lib.sizes < 0.9. Code in Nov2023/separating species. 
#This initial QC was done to decrease the size of the data, according to the treshold we set with Ivan. 
counts <- readMM('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/counts_H.mtx')
colnames <- read.csv('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/colnames_H.csv')
colnames(counts) <- colnames[,2]
rownames <- read.csv('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/rownames_H.csv')
rownames(counts) <- rownames[,2]
metadata <- read.csv('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/metadata_H.csv')

path2data   <- '/mnt/ivanir/Feline2023/ParseBS/newvolume/analysis/sCell/combined/all-well/DGE_unfiltered'
genes     <- read.csv(paste0(path2data, "/all_genes.csv"))
lib.sizes <- colSums(counts)

#sample_info <- read.table('/mnt/ivanir/Feline2023/ParseBS/newvolume/analysis/sample_info.tab', sep = "\t", header = TRUE)

##############checking the initial QC
# Make a box-whisker plot for each sample
pdf("UMI_numbers_pre.pdf")
plot_df <- metadata
ggplot(plot_df, aes (x = factor(sample_name), y = as.numeric(lib.sizes))) +
  geom_boxplot() +
  theme_bw() +  coord_flip() +
  labs(x = "Sample", y = "Number of UMIs") +
  scale_y_log10(breaks = c(100, 1000, 5000, 10000, 50000, 100000),
    labels = c("100","1,000", "5,000", "10,000", "50,000", "100,000"))
dev.off()

# Get ENSEMBL annotations
ensembl <- useEnsembl(biomart = "ensembl",  dataset = "hsapiens_gene_ensembl",mirror="useast")

gene_map  <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol", "chromosome_name"),
  filters = "hgnc_symbol", values = genes$gene_name, mart = ensembl)


# Remove cells with a higher than expected number of mitochondrial reads
mt.index    <- gene_map$chromosome_name == "MT"
mt.counts   <- counts[which(genes$gene_name %in% gene_map$hgnc_symbol[mt.index]), ]
mt.fraction <- colSums(mt.counts)/lib.sizes
mt.p   <- pnorm(mt.fraction, mean = median(mt.fraction), sd = mad(mt.fraction), lower.tail = FALSE)


# Decide on FDR for this threshold
mt.lim <- min(mt.fraction[which(p.adjust(mt.p, method = "fdr") < 0.001)])
print(paste("MT filtering limit set to using statistical test:", mt.lim))
[1] "MT filtering limit set to using statistical test: 0.043859649122807"



metadata <- data.frame(cbind(metadata,mt.fraction))

# Plot mitochondrial threshold
outfile = paste('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/QC_H', "mtreadfraction1.pdf", sep="/")
pdf(outfile)
qplot(lib.sizes, mt.fraction, col = ifelse(mt.fraction>mt.lim, "drop", "keep")) +
  scale_x_log10() +
  labs(x = "UMI count", y = "MT read fraction") +
  theme_minimal() + 
  theme(text = element_text(size=20),legend.position = "none")  +
  scale_color_manual(values = c("drop" = "grey50", "keep" = "black"), name = "")
dev.off()

print(paste('Number of cells after applying MT threshold: ', ncol(counts[,mt.fraction < mt.lim])))
#"Number of cells after applying MT threshold:  51386"
dim(counts[,mt.fraction < mt.lim])
#119684  51386

#dim(counts[,mt.fraction < 0.2])
#119684  53436
print("Nevertheless, setting MT threshold to 0.2!")
mtlim <- 0.2
print(paste('Number of cells after applying MT threshold: ', ncol(counts[,mt.fraction < mt.lim])))

# Read data into Bioconductor package SingleCellExperiment
tryCatch( 
  expr = {
    sce <- SingleCellExperiment(list(counts=counts[,mt.fraction < mt.lim]),
      colData=DataFrame(metadata[mt.fraction < mt.lim,]))
    rownames(sce) <- genes$gene_id

    rownames(genes) <- rownames(sce)
    rowData(sce) <- DataFrame(genes)

    colnames(sce) <- metadata$bc_wells[mt.fraction  < mt.lim]
    colData(sce)  <- DataFrame(metadata[mt.fraction < mt.lim,])

    lib.sizes <- colSums(counts(sce))
    sce_filt  <- sce[calculateAverage(sce)>0.01,]

    clusts <- as.numeric(quickCluster(sce_filt, method = "igraph", min.size = 100))

    min.clust <- min(table(clusts))/2
    new_sizes <- c(floor(min.clust/3), floor(min.clust/2), floor(min.clust))
    sce_filt  <- computeSumFactors(sce_filt, clusters = clusts, sizes = new_sizes, max.cluster.size = 3000)

    sizeFactors(sce) <- sizeFactors(sce_filt)

