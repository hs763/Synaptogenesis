cd /data2/hanna/synaptogenesis/newvolume
singularity shell --bind /data2:/mnt qc_cell.sif
cd /mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/QC_H

#openR
library(scran)
library(irlba)
library(Rtsne)
library(Matrix)
library(ggplot2)
library(biomaRt)
library(viridis)
library(scDblFinder)
library(umap)
library(reticulate)
library(rlist)

umap = import('umap')  

#These count matricies have been filtered for ngenes > 400, lib.sizes > 500, and ngenes/lib.sizes < 0.9. Code in Nov2023/separating species. 
#This initial QC was done to decrease the size of the data, according to the treshold we set with Ivan. 
counts <- readMM('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/counts_H.mtx')
colnames <- read.csv('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/colnames_H.csv')
colnames(counts) <- colnames[,2]
rownames <- read.csv('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/rownames_H.csv')
rownames(counts) <- rownames[,2]
metadata <- read.csv('/mnt/hanna/synaptogenesis/newvolume/analysis/Nov2023/metadata_H.csv')

path2data   <- '/mnt/ivanir/Feline2023/ParseBS/newvolume/analysis/sCell/combined/all-well/DGE_unfiltered'
genes     <- read.csv(paste0(path2data, "/all_genes.csv"))
lib.sizes <- colSums(counts)

dim(counts)
print(paste('Number of genes: ', nrow(counts)))
print(paste('Number of cells: ', ncol(counts)))

# Make a box-whisker plot for each sample
plot_df <- metadata
ggplot(plot_df, aes (x = factor(sample_name), y = as.numeric(lib.sizes))) +
  geom_boxplot() +
  theme_bw() +  coord_flip() +
  labs(x = "Sample", y = "Number of UMIs") +
  scale_y_log10(breaks = c(100, 1000, 5000, 10000, 50000, 100000),
    labels = c("100","1,000", "5,000", "10,000", "50,000", "100,000"))

outfile = paste(outdir, "UMIsBySample_beforeQC_H.pdf", sep="/")
ggsave(outfile)


# Make a box-whisker plot for each sample
pdf("UMIsBySample_beforeQC.pdf")
plot_df <- metadata
ggplot(plot_df, aes (x = factor(sample_name), y = as.numeric(lib.sizes))) +
  geom_boxplot() +
  theme_bw() +  coord_flip() +
  labs(x = "Sample", y = "Number of UMIs") +
  scale_y_log10(breaks = c(100, 1000, 5000, 10000, 50000, 100000),
    labels = c("100","1,000", "5,000", "10,000", "50,000", "100,000"))
dev.off()


# Get ENSEMBL annotations
ensembl <- useEnsembl(biomart = "ensembl",  dataset = "hsapiens_gene_ensembl",mirror="useast")

gene_map  <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol", "chromosome_name"),
  filters = "hgnc_symbol", values = genes$gene_name, mart = ensembl)

# Remove cells with a higher than expected number of mitochondrial reads
mt.index    <- gene_map$chromosome_name == "MT"
mt.counts   <- counts[which(genes$gene_name %in% gene_map$hgnc_symbol[mt.index]), ]
mt.fraction <- colSums(mt.counts)/lib.sizes
mt.p   <- pnorm(mt.fraction, mean = median(mt.fraction), sd = mad(mt.fraction), lower.tail = FALSE)


# Decide on FDR for this threshold
mt.lim <- min(mt.fraction[which(p.adjust(mt.p, method = "fdr") < 0.001)])
print(paste("MT filtering limit set to using statistical test:", mt.lim))
[1] "MT filtering limit set to using statistical test: 0.043859649122807"

metadata <- data.frame(cbind(metadata,mt.fraction))

print(paste('Number of cells after applying MT threshold: ', ncol(counts[,mt.fraction < mt.lim])))
#[1] "Number of cells after applying MT threshold:  51388"

#Plot mitochondrial treshold 
pdf("mtreadfraction.pdf")
qplot(lib.sizes, mt.fraction, col = ifelse(mt.fraction>mt.lim, "drop", "keep")) +
  scale_x_log10() +
  labs(x = "UMI count", y = "MT read fraction") +
  theme_minimal() + 
  theme(text = element_text(size=20),legend.position = "none")  +
  scale_color_manual(values = c("drop" = "grey50", "keep" = "black"), name = "")
dev.off()

mtlim <- 0.2
print(paste('Number of cells after applying MT threshold: ', ncol(counts[,mt.fraction < mt.lim])))
#[1] "Number of cells after applying MT threshold:  53436"

# Read data into Bioconductor package SingleCellExperiment
tryCatch( 
  expr = {
    sce <- SingleCellExperiment(list(counts=counts[,mt.fraction < mt.lim]),
      colData=DataFrame(metadata[mt.fraction < mt.lim,]))
    rownames(sce) <- genes$gene_id

    rownames(genes) <- rownames(sce)
    rowData(sce) <- DataFrame(genes)

    colnames(sce) <- metadata$bc_wells[mt.fraction  < mt.lim]
    colData(sce)  <- DataFrame(metadata[mt.fraction < mt.lim,])

    lib.sizes <- colSums(counts(sce))
    sce_filt  <- sce[calculateAverage(sce)>0.01,]

    clusts <- as.numeric(quickCluster(sce_filt, method = "igraph", min.size = 100))

    min.clust <- min(table(clusts))/2
    new_sizes <- c(floor(min.clust/3), floor(min.clust/2), floor(min.clust))
    sce_filt  <- computeSumFactors(sce_filt, clusters = clusts, sizes = new_sizes, max.cluster.size = 3000)

    sizeFactors(sce) <- sizeFactors(sce_filt)

    # Create Size Factors plot
    pdf("sizefactors.pdf")
    ggplot(data = data.frame(X = lib.sizes, Y = sizeFactors(sce)), mapping = aes(x = X, y = Y)) +
      geom_point() +
      scale_x_log10(breaks = c(500, 2000, 5000, 10000, 30000), labels = c("5,00", "2,000", "5,000", "10,000", "30,000") ) +
      scale_y_log10(breaks = c(0.2, 1, 5)) +
      theme_minimal() +
      theme(text = element_text(size=20))  +
      labs(x = "Number of UMIs", y = "Size Factor")
    dev.off()
  },
  error = function(e){ 
    message('Caught an error!')
    print(e)
  },
  warning = function(w){
    message('Caught an warning!')
    print(w)
  }
)

library(tidyverse)
library(BiocParallel)

bp <- MulticoreParam(25, RNGseed=1234)
      bpstart(bp)
      sce <- scDblFinder(sce, samples="bc1_well", dbr=.05, dims=30, BPPARAM=bp)
      bpstop(bp)
      table(sce$scDblFinder.class)
#singlet doublet 
#  48382    5054 

sce_filt <- sce[calculateAverage(sce)>0.01,]
      sce_filt <- logNormCounts(sce_filt)

decomp  <- modelGeneVar(sce_filt)
hvgs    <- rownames(decomp)[decomp$FDR < 0.1]
length(hvgs)
#3467
pca     <- prcomp_irlba(t(logcounts(sce_filt[hvgs,])), n = 30)
rownames(pca$x) <- colnames(sce_filt)
tsne <- Rtsne(pca$x, pca = FALSE, check_duplicates = FALSE, num_threads=30)
umap  <- umap(pca$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=30, min_dist=.25)

 df_plot <- data.frame(
      colData(sce),
      doublet  = colData(sce)$scDblFinder.class,
      tSNE1    = tsne$Y[, 1],
      tSNE2    = tsne$Y[, 2], 
      UMAP1 = umap$layout[,1],
      UMAP2 = umap$layout[,2] 
      )

# Plot doublets on tsne plot
      plot.index <- order(df_plot$doublet)
      ggplot(df_plot[plot.index,], aes(x = tSNE1, y = tSNE2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))
    
      ggsave( "tsne_doublets.pdf")

# Plot doublets on UMAP
      ggplot(df_plot[plot.index,], aes(x = UMAP1, y = UMAP2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

        ggsave("umap_doublets.pdf")


# Plot box-whisket plot of number of reads in singlet / doublet cells
      ggplot(df_plot, aes(x=doublet, y=log10(lib.sizes))) + 
        geom_boxplot() +
        labs(x = "", y = "log10(Library size)") 

      ggsave("boxplot_doublets.pdf")

doublet_score <- colData(sce)$scDblFinder.score
doublet_class <- colData(sce)$scDblFinder.class
sce_qc <- sce[,colData(sce)$scDblFinder.class == "singlet"]


 # Plot UMIs by sample after QC filtering
      ggplot(data.frame(colData(sce_qc)), aes (x = factor(sample_name), y = as.numeric(lib.sizes))) +
        geom_boxplot() +
        theme_bw() +  coord_flip() +
        labs(x = "Sample", y = "Number of UMIs") +
        scale_y_log10(breaks = c(100, 1000, 5000, 10000, 50000, 100000),
          labels = c("100","1,000", "5,000", "10,000", "50,000", "100,000"))

      ggsave("UMIsBySample_afterQC.pdf")

# Plot UMI density for each sample after QC filtering
     pdf("UMIsDensityBySample_afterQC.pdf", width=12)

    data.frame(colData(sce_qc)) %>% 
          ggplot(aes(color=sample_name, x=lib.sizes, fill= sample_name)) + 
          geom_density(alpha = 0.2) + 
          scale_x_log10() + 
          theme_classic() +
          ylab("Cell density") +
          geom_vline(xintercept = 400)
      dev.off()

# Barchart of the number of cells for each sample after QC
      ggplot(data.frame(colData(sce_qc)), aes (x = factor(sample_name))) +
        geom_bar() +
        theme_bw() +  coord_flip() +
        labs(x = "Sample", y = "Number of Cells") 

      ggsave("CellsBySample_afterQC.pdf")


colData(sce) <- colData(sce)[,-grep("scDblFinder",colnames(colData(sce)))]
colData(sce)$doublet_score <- doublet_score
colData(sce)$doublet_class <- doublet_class

# Plot the histogram of doublet score
      pdf("histogram_of_doublet_score.pdf")
      hist(doublet_score)
      dev.off()

saveRDS(sce, "sce.rds")

setwd("sctour_dir")

sce <- sce[,colData(sce)$doublet_class == "singlet"]

      writeMM(t(counts(sce)), "raw_counts.mtx")
      
      writeLines(colnames(sce), "cells.txt")

      writeLines(rownames(sce), "genes.txt")

      meta <- cbind(cell=rownames(colData(sce)), colData(sce))
      write.table(data.frame(meta), file="metadata.tab", sep="\t", row.names=FALSE, quote=FALSE)

      sce_filt <- sce[calculateAverage(sce)>0.01,]
      sce_filt <- logNormCounts(sce_filt)

      writeMM(t(logcounts(sce_filt)), "norm_counts.mtx", sep="\t")

      writeLines(colnames(sce_filt), "cells_norm.txt")

      writeLines(rowData(sce_filt)$gene_name, "genes_norm.txt")

















###############playing with UMAP##################
#As n_neighbors increases, UMAP connects more and more neighboring points when constructing the 
#graph representation of the high-dimensional data, which leads to a projection that more accurately 
#reflects the global structure of the data. At very low values, any notion of global structure is almost 
#completely lost. As the min_dist parameter increases, UMAP tends to "spread out" the projected points, 
#leading to decreased clustering of the data and less emphasis on global structure.

library(scran)
library(irlba)
library(Rtsne)
library(Matrix)
library(ggplot2)
library(biomaRt)
library(viridis)
library(scDblFinder)
library(umap)
library(reticulate)
library(rlist)

umap = import('umap')  

library(tidyverse)
library(BiocParallel)

sce <- readRDS("sce.rds")

#n_n=30 m_d=0.5
sce_filt <- sce[calculateAverage(sce)>0.01,]
      sce_filt <- logNormCounts(sce_filt)

decomp  <- modelGeneVar(sce_filt)
hvgs    <- rownames(decomp)[decomp$FDR < 0.1]
length(hvgs)
#3467
pca1     <- prcomp_irlba(t(logcounts(sce_filt[hvgs,])), n = 30)
rownames(pca1$x) <- colnames(sce_filt)
umap1  <- umap(pca1$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=10, min_dist=.5)

 df_plot1 <- data.frame(
      colData(sce),
      doublet  = as.vector(colData(sce)$doublet_class),
      UMAP1 = umap1$layout[,1],
      UMAP2 = umap1$layout[,2] 
      )

ggplot(df_plot1, aes(x = UMAP1, y = UMAP2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))


#n_n=30 m_d=0.75
pca2     <- prcomp_irlba(t(logcounts(sce_filt[hvgs,])), n = 30)
rownames(pca2$x) <- colnames(sce_filt)
umap2  <- umap(pca2$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=30, min_dist=.75)

 df_plot2 <- data.frame(
      colData(sce),
      doublet  = as.vector(colData(sce)$doublet_class), 
      UMAP1 = umap2$layout[,1],
      UMAP2 = umap2$layout[,2] 
      )

ggplot(df_plot2, aes(x = UMAP1, y = UMAP2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

#n_n=20 m_d=0.5
pca3     <- prcomp_irlba(t(logcounts(sce_filt[hvgs,])), n = 30)
rownames(pca3$x) <- colnames(sce_filt)
umap3  <- umap(pca3$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=20, min_dist=.5)

 df_plot3 <- data.frame(
      colData(sce),
      doublet  = as.vector(colData(sce)$doublet_class), 
      UMAP1 = umap3$layout[,1],
      UMAP2 = umap3$layout[,2] 
      )

ggplot(df_plot3, aes(x = UMAP1, y = UMAP2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

#n_n=10 m_d=0.5
umap4  <- umap(pca3$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=10, min_dist=.5)

 df_plot4 <- data.frame(
      colData(sce),
      doublet  = as.vector(colData(sce)$doublet_class), 
      UMAP1 = umap4$layout[,1],
      UMAP2 = umap4$layout[,2] 
      )

ggplot(df_plot4, aes(x = UMAP1, y = UMAP2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

#n_n=15 m_d=0.5
umap5 <- umap(pca3$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=15, min_dist=.5)

 df_plot5 <- data.frame(
      colData(sce),
      doublet  = as.vector(colData(sce)$doublet_class), 
      UMAP1 = umap5$layout[,1],
      UMAP2 = umap5$layout[,2] 
      )

ggplot(df_plot5, aes(x = UMAP1, y = UMAP2, col = factor(doublet))) +
        geom_point(size = 0.4) +
        scale_color_manual(values=c("gray","#0169c1"), name = "") +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

#n_n=15 m_d=0.1 - coloured by samples
umap6 <- umap(pca1$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=15, min_dist=.1)

 df_plot6 <- data.frame(
      colData(sce),
      name  = as.vector(colData(sce)$sample_name_H), 
      UMAP1 = umap6$layout[,1],
      UMAP2 = umap6$layout[,2] 
      )

#plotting different timepoitns
ggplot(df_plot6, aes(x = UMAP1, y = UMAP2, color = factor(name))) +
        geom_point(size = 0.4) +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

#n_n=10 m_d=0.5 coloured by samoke 
umap6 <- umap(pca1$x, method="umap-learn", umap_learn_args=c("n_neighbors", "n_epochs", "min_dist"), n_neighbors=10, min_dist=.5)

 df_plot6 <- data.frame(
      colData(sce),
      name  = as.vector(colData(sce)$sample_name_H), 
      UMAP1 = umap6$layout[,1],
      UMAP2 = umap6$layout[,2] 
      )

#plotting different timepoitns
ggplot(df_plot6, aes(x = UMAP1, y = UMAP2, color = factor(name))) +
        geom_point(size = 0.4) +
        labs(x = "Dim 1", y = "Dim 2") +
        theme_minimal() + #theme(legend.position = "none") +
        theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
        theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
        guides(colour = guide_legend(override.aes = list(size=7)))

  
